---
title: Как пользоваться git
---

Статья рассчитана на людей, которым быстренько надо, не особо вникая что-то сделать.

Или как словарик для перевода с разработческого.

## Склонить репу

Репа - репозиторий.

Команда выглядит схожим образом:

``` shell
git clone git@example.com/command/name.git
```

Вместо подключения по ssh с ключами, если репозиторий публичный и вы не собираетесь туда ничего пушить, можно использовать клонирование по HTTPS:

``` shell
git clone https://example.com/command/name.git
```

В итоге у вас на компе появится папка с файлами в репозитории.

## Переключение между ветками

Что такое ветки? В каком-то роде ветку можно считать копией папки. Версией папки. Что-то такое.

### Посмотреть какие ветки есть

``` shell
git branch -a
```

### Выбрать ветку

``` shell
git checkout название_ветки
```

Название ветки - сложная штука. Список веток показывает вперемешку и локальные и удалённые ветки.

Обычно удалённые ветки содержат что-то вроде `origin/` или `remote/` в названии. Чтобы их выбрать, в названии надо просто эти самые `remote/` и `origin/` не указывать.

### Создать свою ветку

Ветки создаются отпочковываясь от той ветки, в которой вы находитесь.

То есть, если вы хотите отпочковаться от какой-то ветки вам сперва нужно её выбрать `git checkout`'ом.

А создать свою и сразу же в неё переключиться можно командой:

``` shell
git checkout -b new_branch_name
```

## Взаимодействие с удалённым сервером

Вообще их может быть и больше и они могут называться иначе, но в 99% случаев ~~вы используете git как централизованную систему контроля версий~~ у вас он один - `origin`.

### Получить вообще всё, что знает удалённый сервер

``` shell
git fetch origin -a
```

Эта команда подтянет к вам все ветки о которых знает удалённый сервер и которых у вас нет.

Но он не выберет за вас новые коммиты, если ветка уже существовала.

### Подтянуть коммиты конкретной ветки

Если конкретная ветка - master, то так:

``` shell
git pull origin master
```

### Отправить свои коммиты

``` shell
git push origin master
```

## Как коммитить

Коммитить - это как сохранять файл, только фиксировать состояние папки.

Но тут всё _чуток_ сложнее.

Вообще, сделав изменения на них можно (и нужно) посмотреть:

Самое простое - список изменённых файлов и их состояние относительно _индекса_. Никакой конкретики относительно изменений внутри файлов нет.

``` shell
git status
```

### Что за _индекс_

Индекс это то, что вы пометили как то, что собираетесь закоммитить (сохранить).

Категорически советую делать это аккуратно и внимательно, в интерактивном режиме, а если что-то идёт не так, нажимать `q`, исправлять и начинать процесс интерактивного добавления в индекс заново.

``` shell
git add -p
```

Это может показаться занудным, но спасёт огромную тонну времени в будущем и сбережёт от ошибок, добавлений чего-то лишнего и т.д. `git add .` и `git commit -a` - это признаки профнепригодности.

В `git status` добавленное в индекс отображается зелёненьким.

### Как посмотреть что в индексе?

``` shell
git diff --cached
```

### А что не в индексе?

``` shell
git diff
```

### Коммитить-то как?

Определились что коммитим? Гуд.

``` shell
git commit -m "Описание того, что мы изменили"
```

Всё, коммит зафиксирован.

## Как смотреть историю коммитов?

``` shell
git log
```

### Вместе с изменениями

``` shell
git log -p
```

### Достаточно только списка изменённых файлов

``` shell
git log --stat
```

### Компактнее!

``` shell
git log --oneline
```

### И с поиском по тексту коммита

``` shell
git log --grep MYTASK-666
```
